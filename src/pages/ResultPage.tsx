import React from 'react';
import { useState } from 'react';
import { useLocation, useNavigate, Link } from 'react-router-dom';
import { 
  ArrowLeft, 
  Share2, 
  Download, 
  Camera, 
  AlertCircle,
  CheckCircle,
  Lightbulb,
  Shield,
  MessageCircle
} from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';
import { DetectionResult } from '../types';
import ChatAssistant from '../components/ChatAssistant';

const ResultPage: React.FC = () => {
  const { t } = useLanguage();
  const location = useLocation();
  const navigate = useNavigate();
  const [isChatOpen, setIsChatOpen] = useState(false);
  
  const result = location.state?.result as DetectionResult;

  if (!result) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-xl text-green-600 mb-4">No results found</p>
          <Link
            to="/upload"
            className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors"
          >
            Upload New Image
          </Link>
        </div>
      </div>
    );
  }

  const isHealthy = result.disease === 'Healthy Crop';
  const confidenceColor = result.confidence >= 80 ? 'text-green-600' : result.confidence >= 60 ? 'text-yellow-600' : 'text-red-600';

  const handleShare = () => {
    const shareText = `AgroGuardian Detection Result:\n\nCrop: ${result.crop}\nIssue: ${result.disease}\nConfidence: ${result.confidence}%\n\nRecommendation: ${result.remedy}`;
    
    if (navigator.share) {
      navigator.share({
        title: 'AgroGuardian Detection Result',
        text: shareText,
      });
    } else {
      // Fallback to WhatsApp
      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText)}`;
      window.open(whatsappUrl, '_blank');
    }
  };

  const handleDownload = () => {
    const reportContent = `
AgroGuardian Detection Report
Generated: ${new Date(result.timestamp).toLocaleDateString()}

Crop: ${result.crop}
Detected Issue: ${result.disease}
Confidence Level: ${result.confidence}%

Treatment Recommendation:
${result.remedy}

Preventive Measures:
${result.preventiveMeasures.map((measure, index) => `${index + 1}. ${measure}`).join('\n')}

---
Report generated by AgroGuardian AI
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `agroguardian-report-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <button
            onClick={() => navigate('/upload')}
            className="flex items-center space-x-2 text-green-600 hover:text-green-700 font-medium"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>Back to Upload</span>
          </button>
          
          <h1 className="text-2xl md:text-3xl font-bold text-green-800">
            {t('result.title')}
          </h1>
          
          <div className="w-20"></div> {/* Spacer for centering */}
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Image Section */}
          <div className="bg-white rounded-2xl shadow-xl p-6">
            <h2 className="text-xl font-semibold text-green-800 mb-4">Analyzed Image</h2>
            {result.imageUrl && (
              <img
                src={result.imageUrl}
                alt="Analyzed crop"
                className="w-full h-64 object-cover rounded-lg shadow-md"
              />
            )}
          </div>

          {/* Results Section */}
          <div className="bg-white rounded-2xl shadow-xl p-6">
            <div className="space-y-6">
              {/* Status Indicator */}
              <div className={`flex items-center space-x-3 p-4 rounded-lg ${
                isHealthy ? 'bg-green-50 border border-green-200' : 'bg-orange-50 border border-orange-200'
              }`}>
                {isHealthy ? (
                  <CheckCircle className="w-8 h-8 text-green-600" />
                ) : (
                  <AlertCircle className="w-8 h-8 text-orange-600" />
                )}
                <div>
                  <p className="font-semibold text-lg">
                    {isHealthy ? 'Healthy Crop Detected!' : 'Issue Detected'}
                  </p>
                  <p className="text-sm text-gray-600">
                    Analysis completed on {new Date(result.timestamp).toLocaleDateString()}
                  </p>
                </div>
              </div>

              {/* Detection Details */}
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600 mb-1">{t('result.crop')}</p>
                  <p className="font-semibold text-green-800 capitalize">{result.crop}</p>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600 mb-1">{t('result.confidence')}</p>
                  <p className={`font-semibold ${confidenceColor}`}>{result.confidence}%</p>
                </div>
              </div>

              {/* Disease/Issue */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <p className="text-sm text-gray-600 mb-2">{t('result.disease')}</p>
                <p className="font-semibold text-lg text-green-800">{result.disease}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Treatment Recommendation */}
        <div className="mt-8 bg-white rounded-2xl shadow-xl p-6">
          <div className="flex items-center space-x-2 mb-4">
            <Lightbulb className="w-6 h-6 text-yellow-600" />
            <h2 className="text-xl font-semibold text-green-800">
              {t('result.remedy.title')}
            </h2>
          </div>
          <div className="bg-green-50 p-4 rounded-lg border border-green-200">
            <p className="text-green-800 leading-relaxed">{result.remedy}</p>
          </div>
        </div>

        {/* Preventive Measures */}
        {result.preventiveMeasures && result.preventiveMeasures.length > 0 && (
          <div className="mt-6 bg-white rounded-2xl shadow-xl p-6">
            <div className="flex items-center space-x-2 mb-4">
              <Shield className="w-6 h-6 text-blue-600" />
              <h2 className="text-xl font-semibold text-green-800">
                {t('result.preventive')}
              </h2>
            </div>
            <ul className="space-y-2">
              {result.preventiveMeasures.map((measure, index) => (
                <li key={index} className="flex items-start space-x-2">
                  <span className="bg-green-100 text-green-800 text-sm font-semibold px-2 py-1 rounded-full mt-0.5">
                    {index + 1}
                  </span>
                  <span className="text-green-700">{measure}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Action Buttons */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-4 gap-4">
          <button
            onClick={handleShare}
            className="flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
          >
            <Share2 className="w-5 h-5" />
            <span>{t('result.share.whatsapp')}</span>
          </button>
          
          <button
            onClick={handleDownload}
            className="flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
          >
            <Download className="w-5 h-5" />
            <span>{t('result.download')}</span>
          </button>
          
          <button
            onClick={() => setIsChatOpen(true)}
            className="flex items-center justify-center space-x-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors"
          >
            <MessageCircle className="w-5 h-5" />
            <span>Ask AI Assistant</span>
          </button>
          
          <Link
            to="/upload"
            className="flex items-center justify-center space-x-2 bg-green-100 hover:bg-green-200 text-green-700 font-semibold py-3 px-6 rounded-lg transition-colors border border-green-300"
          >
            <Camera className="w-5 h-5" />
            <span>{t('result.scan.again')}</span>
          </Link>
        </div>

        {/* Chat Assistant */}
        <ChatAssistant 
          detectionResult={result}
          isOpen={isChatOpen}
          onToggle={() => setIsChatOpen(!isChatOpen)}
        />
      </div>
    </div>
  );
};

export default ResultPage;