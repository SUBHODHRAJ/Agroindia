import React, { useState, useEffect } from 'react';
import { 
  BarChart3, 
  TrendingUp, 
  Calendar, 
  Bell,
  Download,
  Eye,
  Filter,
  Search
} from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';

interface UserDashboardProps {
  user: any;
}

const UserDashboard: React.FC<UserDashboardProps> = ({ user }) => {
  const { t } = useLanguage();
  const [stats, setStats] = useState<any>(null);
  const [history, setHistory] = useState<any[]>([]);
  const [notifications, setNotifications] = useState<any[]>([]);
  const [reports, setReports] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'overview' | 'history' | 'reports' | 'notifications'>('overview');
  const [filters, setFilters] = useState({
    cropType: '',
    diseaseType: '',
    period: '30'
  });

  useEffect(() => {
    loadDashboardData();
  }, [filters]);

  const loadDashboardData = async () => {
    setLoading(true);
    const token = localStorage.getItem('authToken');
    
    try {
      // Load statistics
      const statsResponse = await fetch(`/api/detections/stats?period=${filters.period}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const statsData = await statsResponse.json();
      if (statsData.success) setStats(statsData.stats);

      // Load detection history
      const historyResponse = await fetch(`/api/detections/history?cropType=${filters.cropType}&diseaseType=${filters.diseaseType}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const historyData = await historyResponse.json();
      if (historyData.success) setHistory(historyData.detections);

      // Load notifications
      const notificationsResponse = await fetch('/api/notifications', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const notificationsData = await notificationsResponse.json();
      if (notificationsData.success) setNotifications(notificationsData.notifications);

      // Load weekly reports
      const reportsResponse = await fetch('/api/notifications/reports', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const reportsData = await reportsResponse.json();
      if (reportsData.success) setReports(reportsData.reports);

    } catch (error) {
      console.error('Dashboard data loading error:', error);
    } finally {
      setLoading(false);
    }
  };

  const markNotificationRead = async (notificationId: number) => {
    const token = localStorage.getItem('authToken');
    try {
      await fetch(`/api/notifications/${notificationId}/read`, {
        method: 'PUT',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      loadDashboardData();
    } catch (error) {
      console.error('Mark notification read error:', error);
    }
  };

  const downloadReport = (report: any) => {
    const reportContent = `
AgroGuardian Weekly Report
Week: ${new Date(report.week_start).toLocaleDateString()} - ${new Date(report.week_end).toLocaleDateString()}

Summary:
- Total Detections: ${report.total_detections}
- Healthy Crops: ${report.healthy_crops}
- Diseased Crops: ${report.diseased_crops}
- Most Common Disease: ${report.most_common_disease || 'None'}

Detailed Detections:
${report.report_data.detections?.map((d: any, i: number) => 
  `${i + 1}. ${d.crop} - ${d.disease} (${d.confidence}% confidence) - ${new Date(d.date).toLocaleDateString()}`
).join('\n') || 'No detections this week'}

Generated by AgroGuardian
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `agroguardian-report-${report.week_start}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-green-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-green-600">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-green-800 mb-2">
            Welcome back, {user.name}!
          </h1>
          <p className="text-green-600">Track your crop health and get insights</p>
        </div>

        {/* Tab Navigation */}
        <div className="mb-8">
          <div className="border-b border-green-200">
            <nav className="-mb-px flex space-x-8">
              {[
                { id: 'overview', label: 'Overview', icon: BarChart3 },
                { id: 'history', label: 'Detection History', icon: Calendar },
                { id: 'reports', label: 'Weekly Reports', icon: TrendingUp },
                { id: 'notifications', label: 'Notifications', icon: Bell }
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as any)}
                  className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? 'border-green-500 text-green-600'
                      : 'border-transparent text-green-500 hover:text-green-600 hover:border-green-300'
                  }`}
                >
                  <tab.icon className="w-5 h-5" />
                  <span>{tab.label}</span>
                  {tab.id === 'notifications' && notifications.filter(n => !n.is_read).length > 0 && (
                    <span className="bg-red-500 text-white text-xs rounded-full px-2 py-1">
                      {notifications.filter(n => !n.is_read).length}
                    </span>
                  )}
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Overview Tab */}
        {activeTab === 'overview' && stats && (
          <div className="space-y-8">
            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-green-600 text-sm font-medium">Total Scans</p>
                    <p className="text-3xl font-bold text-green-800">{stats.totalDetections}</p>
                  </div>
                  <div className="bg-green-100 p-3 rounded-lg">
                    <BarChart3 className="w-6 h-6 text-green-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-green-600 text-sm font-medium">Healthy Crops</p>
                    <p className="text-3xl font-bold text-green-800">{stats.healthyDetections}</p>
                  </div>
                  <div className="bg-green-100 p-3 rounded-lg">
                    <TrendingUp className="w-6 h-6 text-green-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-green-600 text-sm font-medium">Issues Found</p>
                    <p className="text-3xl font-bold text-orange-600">{stats.diseasedDetections}</p>
                  </div>
                  <div className="bg-orange-100 p-3 rounded-lg">
                    <Eye className="w-6 h-6 text-orange-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-xl shadow-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-green-600 text-sm font-medium">Avg Confidence</p>
                    <p className="text-3xl font-bold text-green-800">{stats.avgConfidence}%</p>
                  </div>
                  <div className="bg-blue-100 p-3 rounded-lg">
                    <BarChart3 className="w-6 h-6 text-blue-600" />
                  </div>
                </div>
              </div>
            </div>

            {/* Charts */}
            <div className="grid lg:grid-cols-2 gap-8">
              {/* Crop Breakdown */}
              <div className="bg-white p-6 rounded-xl shadow-lg">
                <h3 className="text-lg font-semibold text-green-800 mb-4">Crop Breakdown</h3>
                <div className="space-y-3">
                  {stats.cropBreakdown.map((crop: any, index: number) => (
                    <div key={index} className="flex items-center justify-between">
                      <span className="text-green-700 capitalize">{crop.crop_type}</span>
                      <div className="flex items-center space-x-2">
                        <div className="w-20 bg-green-100 rounded-full h-2">
                          <div 
                            className="bg-green-600 h-2 rounded-full"
                            style={{ width: `${(crop.count / stats.totalDetections) * 100}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-green-600">{crop.count}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Top Diseases */}
              <div className="bg-white p-6 rounded-xl shadow-lg">
                <h3 className="text-lg font-semibold text-green-800 mb-4">Most Common Issues</h3>
                <div className="space-y-3">
                  {stats.topDiseases.map((disease: any, index: number) => (
                    <div key={index} className="flex items-center justify-between">
                      <span className="text-green-700">{disease.disease_name}</span>
                      <div className="flex items-center space-x-2">
                        <div className="w-20 bg-orange-100 rounded-full h-2">
                          <div 
                            className="bg-orange-600 h-2 rounded-full"
                            style={{ width: `${(disease.count / stats.diseasedDetections) * 100}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-orange-600">{disease.count}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* History Tab */}
        {activeTab === 'history' && (
          <div className="space-y-6">
            {/* Filters */}
            <div className="bg-white p-6 rounded-xl shadow-lg">
              <div className="grid md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-green-800 font-medium mb-2">Crop Type</label>
                  <select
                    value={filters.cropType}
                    onChange={(e) => setFilters({...filters, cropType: e.target.value})}
                    className="w-full p-3 border border-green-300 rounded-lg focus:border-green-500"
                  >
                    <option value="">All Crops</option>
                    <option value="tomato">Tomato</option>
                    <option value="potato">Potato</option>
                    <option value="wheat">Wheat</option>
                    <option value="rice">Rice</option>
                  </select>
                </div>
                <div>
                  <label className="block text-green-800 font-medium mb-2">Disease Type</label>
                  <input
                    type="text"
                    value={filters.diseaseType}
                    onChange={(e) => setFilters({...filters, diseaseType: e.target.value})}
                    placeholder="Search diseases..."
                    className="w-full p-3 border border-green-300 rounded-lg focus:border-green-500"
                  />
                </div>
                <div>
                  <label className="block text-green-800 font-medium mb-2">Period</label>
                  <select
                    value={filters.period}
                    onChange={(e) => setFilters({...filters, period: e.target.value})}
                    className="w-full p-3 border border-green-300 rounded-lg focus:border-green-500"
                  >
                    <option value="7">Last 7 days</option>
                    <option value="30">Last 30 days</option>
                    <option value="90">Last 3 months</option>
                    <option value="365">Last year</option>
                  </select>
                </div>
              </div>
            </div>

            {/* History List */}
            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-green-50">
                    <tr>
                      <th className="text-left py-3 px-4 font-semibold text-green-800">Date</th>
                      <th className="text-left py-3 px-4 font-semibold text-green-800">Crop</th>
                      <th className="text-left py-3 px-4 font-semibold text-green-800">Issue</th>
                      <th className="text-left py-3 px-4 font-semibold text-green-800">Confidence</th>
                      <th className="text-left py-3 px-4 font-semibold text-green-800">Image</th>
                    </tr>
                  </thead>
                  <tbody>
                    {history.map((detection, index) => (
                      <tr key={detection.id} className={index % 2 === 0 ? 'bg-green-25' : ''}>
                        <td className="py-3 px-4 text-sm text-green-700">
                          {new Date(detection.timestamp).toLocaleDateString()}
                        </td>
                        <td className="py-3 px-4 text-sm text-green-700 capitalize">
                          {detection.crop}
                        </td>
                        <td className="py-3 px-4 text-sm text-green-700">
                          {detection.disease}
                        </td>
                        <td className="py-3 px-4 text-sm">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            detection.confidence >= 80 
                              ? 'bg-green-100 text-green-800'
                              : detection.confidence >= 60
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-red-100 text-red-800'
                          }`}>
                            {detection.confidence}%
                          </span>
                        </td>
                        <td className="py-3 px-4">
                          <button
                            onClick={() => window.open(detection.imageUrl, '_blank')}
                            className="text-green-600 hover:text-green-700"
                          >
                            <Eye className="w-4 h-4" />
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {/* Reports Tab */}
        {activeTab === 'reports' && (
          <div className="space-y-6">
            <div className="grid gap-6">
              {reports.map((report) => (
                <div key={report.id} className="bg-white p-6 rounded-xl shadow-lg">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-lg font-semibold text-green-800">
                        Week of {new Date(report.week_start).toLocaleDateString()}
                      </h3>
                      <p className="text-green-600">
                        {new Date(report.week_start).toLocaleDateString()} - {new Date(report.week_end).toLocaleDateString()}
                      </p>
                    </div>
                    <button
                      onClick={() => downloadReport(report)}
                      className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
                    >
                      <Download className="w-4 h-4" />
                      <span>Download</span>
                    </button>
                  </div>

                  <div className="grid md:grid-cols-4 gap-4 mb-4">
                    <div className="text-center">
                      <p className="text-2xl font-bold text-green-800">{report.total_detections}</p>
                      <p className="text-sm text-green-600">Total Scans</p>
                    </div>
                    <div className="text-center">
                      <p className="text-2xl font-bold text-green-600">{report.healthy_crops}</p>
                      <p className="text-sm text-green-600">Healthy</p>
                    </div>
                    <div className="text-center">
                      <p className="text-2xl font-bold text-orange-600">{report.diseased_crops}</p>
                      <p className="text-sm text-green-600">Issues Found</p>
                    </div>
                    <div className="text-center">
                      <p className="text-lg font-semibold text-green-800">
                        {report.most_common_disease || 'None'}
                      </p>
                      <p className="text-sm text-green-600">Most Common Issue</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Notifications Tab */}
        {activeTab === 'notifications' && (
          <div className="space-y-4">
            {notifications.map((notification) => (
              <div
                key={notification.id}
                className={`bg-white p-6 rounded-xl shadow-lg border-l-4 ${
                  notification.is_read ? 'border-gray-300' : 'border-green-500'
                }`}
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <h3 className={`font-semibold ${
                      notification.is_read ? 'text-gray-700' : 'text-green-800'
                    }`}>
                      {notification.title}
                    </h3>
                    <p className={`mt-1 ${
                      notification.is_read ? 'text-gray-600' : 'text-green-700'
                    }`}>
                      {notification.message}
                    </p>
                    <p className="text-sm text-gray-500 mt-2">
                      {new Date(notification.created_at).toLocaleString()}
                    </p>
                  </div>
                  {!notification.is_read && (
                    <button
                      onClick={() => markNotificationRead(notification.id)}
                      className="text-green-600 hover:text-green-700 text-sm"
                    >
                      Mark as read
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default UserDashboard;